<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on For myself in two weeks</title><link>https://dncknc.github.io/</link><description>Recent content in Introduction on For myself in two weeks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dncknc.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>.gitignore をホワイトリストで運用</title><link>https://dncknc.github.io/docs/git/git_ignore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/git/git_ignore/</guid><description>.gitignore をホワイトリストで運用する設定 # # -------------------------------------------- # # ホワイトリスト型の .gitignore # 参考: https://ai-inter1.com/python-print/ # -------------------------------------------- # # 各記号の意味 # * : /以外の0文字以上の文字列にマッチ # ? : /以外の1文字にマッチ # [0-9] : /以外の指定した1文字にマッチ # **: 0個以上のファイル or ディレクトリにマッチ # !で始まる行 : !以降のパターン文字列が示すファイル or ディレクトリを無視しない。前の無視指定を上書きする # -------------------------------------------- # # 【1】 全ファイルを無視する設定 # すべてのファイルを無視するが、フォルダは全て追加する # この設定でも git は空フォルダを無視することに注意。 * !*/ # 【2】 任意のファイルやフォルダを追加する設定 # 指定したフォルダの下にあるファイルとフォルダを追加する # 二重のアスタリスクは0個以上のファイルやディレクトリに一致することを示す。 # !/lib/** !/historical_data/** # このファイル(.gitignore)と同階層以下の「??？_a」というフォルダ階層以降を許可 # !**/*_a/** # このファイル(.</description></item><item><title>Hugoの設定</title><link>https://dncknc.github.io/docs/hugo%E9%96%A2%E9%80%A3/hugo%E3%81%AE%E8%A8%AD%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/hugo%E9%96%A2%E9%80%A3/hugo%E3%81%AE%E8%A8%AD%E5%AE%9A/</guid><description>設定 # 基本設定 # KaTexなどのマークアップを有効にする # [markup.goldmark.renderer] unsafe = true GitHub Actions を使って GitHub Pages に公開する設定 # 2022-02-14
キーの作成 # deploy key(秘密鍵) と secret(公開鍵)を登録する。
https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/
空の .nojekyll を作成する # git push してgithub側で build される際、「Deploy to GitHub Pages」の段階で次のエラーが出るため、空の .nojekyll を作成しておく。
Error: Error: No uploaded artifact was found! Please check if there are any errors at build step. touch .nojekyll https://stackoverflow.com/questions/70830152/page-on-github-wont-publish-error-404-not-found
gh-pages-deployment.yml # ここを参考にGitHub Actionの設定ファイル gh-pages-deployment.</description></item><item><title>request</title><link>https://dncknc.github.io/docs/python3/request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/python3/request/</guid><description>request関連 # dir() についてはこちらから。 https://docs.python.org/ja/3.9/library/functions.html#dir
1 2 3 4 5 6 7 8 9 # dir() は引数がない場合、現在のローカルスコープにある名前のリストを返します。 # 引数がある場合、そのオブジェクトの有効な属性のリストを返そうと試みます。 # response の中身を確認 dir(response) dir(response.request) # リクエストに使用したヘッダーを確認 response.request.headers</description></item><item><title>snippet</title><link>https://dncknc.github.io/docs/python3/snippet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/python3/snippet/</guid><description>ファイル関連 # 基本 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # ファイルの存在確認 import os if (os.path.isfile(path)): pass # ファイルの読み込み with open(&amp;#39;./settings.json&amp;#39;) as f: print(f.read()) # ファイルの書込み data = &amp;#34;test&amp;#34; with open(path, mode=&amp;#39;w&amp;#39;) as f: f.write(data) # ファイルのコピー import shutil shutil.copy(&amp;#39;./old.txt&amp;#39;, &amp;#39;./sample/new.txt&amp;#39;) Json # 1 2 3 4 5 6 7 8 9 10 # json.</description></item><item><title>シンタックスハイライト</title><link>https://dncknc.github.io/docs/hugo%E9%96%A2%E9%80%A3/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/hugo%E9%96%A2%E9%80%A3/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88/</guid><description>使用可能な言語 https://gohugo.io/content-management/syntax-highlighting/#list-of-chroma-highlighting-languages</description></item><item><title>基本操作</title><link>https://dncknc.github.io/docs/data-science/pandas/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/data-science/pandas/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description/></item><item><title>pandas</title><link>https://dncknc.github.io/docs/data-science/pandas/snippet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/data-science/pandas/snippet/</guid><description>snippet # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import pandas as pd df.to_pickle(&amp;#39;df_data.pkl&amp;#39;) pd.read_pickle(&amp;#39;df_data.pkl&amp;#39;) # 基本操作 ## 既存のカラムを index に設定する。 ## drop=False で既存のインデックスがカラムに退避される。 df = df.set_index([&amp;#39;timestamp&amp;#39;], drop=False) ## index の番号を振りなおす。dropna()した時などに使う。 # drop=True で既存のインデックスを退避せず上書きする(デフォルトでFalse?) df = df.reset_index(drop=True) df.index.name= &amp;#39;index&amp;#39; ## 既存のインデックスを連番に変更し、既存のインデックスはカラムに退避する df = df.reset_index() df.index.name = &amp;#39;index&amp;#39; # 統計量を表示する df.describe()</description></item><item><title>時刻関連</title><link>https://dncknc.github.io/docs/python3/%E6%99%82%E5%88%BB%E9%96%A2%E9%80%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/python3/%E6%99%82%E5%88%BB%E9%96%A2%E9%80%A3/</guid><description>時刻 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import datetime now = datetime.datetime.now() print(now) # 2022-02-19 13:30:21.912392 print(type(now)) # &amp;lt;class &amp;#39;datetime.datetime&amp;#39;&amp;gt; print(now.strftime(&amp;#39;%Y年%m月%d日 %H:%M:%S&amp;#39;)) # 2022年02月19日 13:29:46 print(now.isoformat()) # 2022-02-19T13:29:46.761362 print(now.year) # 2022 print(now.month) # 2 print(now.day) # 19 print(now.hour) # 13 print(now.minute) # 30 print(now.</description></item><item><title>pip</title><link>https://dncknc.github.io/docs/data-science/pip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/data-science/pip/</guid><description> pip install mplfinance</description></item><item><title/><link>https://dncknc.github.io/docs/network/%E9%80%9A%E4%BF%A1%E9%80%9F%E5%BA%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dncknc.github.io/docs/network/%E9%80%9A%E4%BF%A1%E9%80%9F%E5%BA%A6/</guid><description>httping</description></item></channel></rss>