[{"id":0,"href":"/docs/git/git_ignore/","title":".gitignore をホワイトリストで運用","section":"Git","content":".gitignore をホワイトリストで運用する設定 #  # -------------------------------------------- # # ホワイトリスト型の .gitignore # 参考: https://ai-inter1.com/python-print/ # -------------------------------------------- # # 各記号の意味 # * : /以外の0文字以上の文字列にマッチ # ? : /以外の1文字にマッチ # [0-9] : /以外の指定した1文字にマッチ # **: 0個以上のファイル or ディレクトリにマッチ # !で始まる行 : !以降のパターン文字列が示すファイル or ディレクトリを無視しない。前の無視指定を上書きする # -------------------------------------------- # # 【1】 全ファイルを無視する設定 # すべてのファイルを無視するが、フォルダは全て追加する # この設定でも git は空フォルダを無視することに注意。 * !*/ # 【2】 任意のファイルやフォルダを追加する設定 # 指定したフォルダの下にあるファイルとフォルダを追加する # 二重のアスタリスクは0個以上のファイルやディレクトリに一致することを示す。 # !/lib/** !/historical_data/** # このファイル(.gitignore)と同階層以下の「??？_a」というフォルダ階層以降を許可 # !**/*_a/** # このファイル(.gitignore)と同階層のファイルだけ許可 # .gitignoreにファイル名やフォルダ名を書くと、 # 階層関係なくマッチする名前のファイルを無視できる。 # 先頭に「/（スラッシュ）」を付けると、.gitignoreが置かれてあるディレクトリを # 基準としてファイルを無視できる。 # !/README.md !/.gitignore !/*.ipynb !/*.md # ------------------------------------------------ # 【3】 常に除外するファイルやフォルダを禁止 # OSが自動で作るファイル .DS_Store Thumbs.db # アプリが自動で作るファイル .ipynb_checkpoints/ # その他 /archive/ /csv/ /fonts/ "},{"id":1,"href":"/docs/","title":"01_hugoのドキュメント群","section":"Introduction","content":"ドキュメント群 #  "},{"id":2,"href":"/docs/hugo%E9%96%A2%E9%80%A3/hugo%E3%81%AE%E8%A8%AD%E5%AE%9A/","title":"Hugoの設定","section":"Hugo関連","content":"設定 #  基本設定 #  KaTexなどのマークアップを有効にする #  [markup.goldmark.renderer] unsafe = true  GitHub Actions を使って GitHub Pages に公開する設定 #  2022-02-14\nキーの作成 #  deploy key(秘密鍵) と secret(公開鍵)を登録する。\nhttps://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/\n空の .nojekyll を作成する #  git push してgithub側で build される際、「Deploy to GitHub Pages」の段階で次のエラーが出るため、空の .nojekyll を作成しておく。\nError: Error: No uploaded artifact was found! Please check if there are any errors at build step. touch .nojekyll  https://stackoverflow.com/questions/70830152/page-on-github-wont-publish-error-404-not-found\ngh-pages-deployment.yml #  ここを参考にGitHub Actionの設定ファイル gh-pages-deployment.yml を作成する。 https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action\n以下の例では、\n# extended: true\nのコメントアウトをはずし、 if: github.ref == 'refs/heads/main' を削除し、branch を masterにしてある。\n.github/workflows/gh-pages-deployment.yml\nname: github pages on: push: branches: - master # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public  "},{"id":3,"href":"/docs/python3/request/","title":"request","section":"Python3","content":"request関連 #  dir() についてはこちらから。 https://docs.python.org/ja/3.9/library/functions.html#dir\n1 2 3 4 5 6 7 8 9  # dir() は引数がない場合、現在のローカルスコープにある名前のリストを返します。 # 引数がある場合、そのオブジェクトの有効な属性のリストを返そうと試みます。 # response の中身を確認 dir(response) dir(response.request) # リクエストに使用したヘッダーを確認 response.request.headers   "},{"id":4,"href":"/docs/python3/snippet/","title":"snippet","section":"Python3","content":"ファイル関連 #  基本 #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # ファイルの存在確認 import os if (os.path.isfile(path)): pass # ファイルの読み込み with open(\u0026#39;./settings.json\u0026#39;) as f: print(f.read()) # ファイルの書込み data = \u0026#34;test\u0026#34; with open(path, mode=\u0026#39;w\u0026#39;) as f: f.write(data) # ファイルのコピー import shutil shutil.copy(\u0026#39;./old.txt\u0026#39;, \u0026#39;./sample/new.txt\u0026#39;)   Json #  1 2 3 4 5 6 7 8 9 10  # json.load() で読み込む場合 with open(\u0026#39;./settings.json\u0026#39;) as f: json_dict = json.load(f) pprint.pprint(json_dict, width=40) print(type(json_dict)) # dict を for ループ for key, value in dict_test.items(): print(key, value)   ファイルパス、ファイル名関連 #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  # ファイルパスからファイル名を取得 basename = os.path.basename(path) print(basename) # 新しいパスを作成する import os read_path = \u0026#39;./aaa/bbb/ccc_ddd_eee.txt\u0026#39; file_name = os.path.basename(read_path) #\u0026#39;ccc_ddd_eee.txt\u0026#39; dir_name = os.path.dirname(read_path) # \u0026#39;./aaa/bbb\u0026#39; file_name_split = file_name.split(\u0026#39;.\u0026#39;) new_file_name = file_name_split[0] + \u0026#34;_add_xxx_.\u0026#34; + file_name_split[1] # 文字列を正規表現で置換 import re new_dir = re.sub(\u0026#39;bbb$\u0026#39;, \u0026#39;zzz\u0026#39;, dir_name) save_path = new_dir + \u0026#39;/\u0026#39; + new_file_name # \u0026#39;./aaa/zzz/ccc_ddd_eee_add_xxx_.txt\u0026#39;   テストの書き方 #  1 2 3 4 5 6 7 8 9 10 11 12 13  def add(x, y): \u0026#34;\u0026#34;\u0026#34; xとyを加算した結果を返す \u0026gt;\u0026gt;\u0026gt; add(2, 3) 5 \u0026#34;\u0026#34;\u0026#34; return x + y python -m doctest -v add.py # Jupyter上でテストする場合 import doctest doctest.testmod()   1  dir(response.request)   辞書を結合する方法 #  1 2 3 4 5 6 7 8  d1 = {\u0026#34;a\u0026#34;: 1} d2 = {\u0026#34;b\u0026#34;: 2} d1.update(d2) # 以下も同じ機能 d1 = {\u0026#34;a\u0026#34;: 1} d2 = {\u0026#34;b\u0026#34;: 2} d1 = d1 | d2       "},{"id":5,"href":"/docs/vagrant/vagrant%E3%81%AE%E8%A8%AD%E5%AE%9A/","title":"vagrantの設定","section":"Vagrant","content":"設定 #  "},{"id":6,"href":"/docs/hugo%E9%96%A2%E9%80%A3/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88/","title":"シンタックスハイライト","section":"Hugo関連","content":"使用可能な言語 https://gohugo.io/content-management/syntax-highlighting/#list-of-chroma-highlighting-languages\n"},{"id":7,"href":"/docs/data-science/pandas/snippet/","title":"pandas","section":"Data Science","content":"snippet #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import pandas as pd df.to_pickle(\u0026#39;df_data.pkl\u0026#39;) pd.read_pickle(\u0026#39;df_data.pkl\u0026#39;) # 基本操作 ## 既存のカラムを index に設定する。 ## drop=False で既存のインデックスがカラムに退避される。 df = df.set_index([\u0026#39;timestamp\u0026#39;], drop=False) ## index の番号を振りなおす。dropna()した時などに使う。 # drop=True で既存のインデックスを退避せず上書きする(デフォルトでFalse?) df = df.reset_index(drop=True) df.index.name= \u0026#39;index\u0026#39; ## 既存のインデックスを連番に変更し、既存のインデックスはカラムに退避する df = df.reset_index() df.index.name = \u0026#39;index\u0026#39; # 統計量を表示する df.describe()   "},{"id":8,"href":"/docs/python3/%E6%99%82%E5%88%BB%E9%96%A2%E9%80%A3/","title":"時刻関連","section":"Python3","content":"時刻 #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import datetime now = datetime.datetime.now() print(now) # 2022-02-19 13:30:21.912392 print(type(now)) # \u0026lt;class \u0026#39;datetime.datetime\u0026#39;\u0026gt; print(now.strftime(\u0026#39;%Y年%m月%d日 %H:%M:%S\u0026#39;)) # 2022年02月19日 13:29:46 print(now.isoformat()) # 2022-02-19T13:29:46.761362 print(now.year) # 2022 print(now.month) # 2 print(now.day) # 19 print(now.hour) # 13 print(now.minute) # 30 print(now.second) # 21 print(now.microsecond) # 912392 print(type(now.year)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;   スケジュールを実行する #  https://schedule.readthedocs.io/en/stable/examples.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import schedule,time,datetime def test_func(): s = datetime.datetime.now().strftime(\u0026#39;%Y/%m/%d %H:%M:%S\u0026#39;) print( s + \u0026#39; schedule completed.\u0026#39; ) # スケジュールを追加する関数 def add_schedule(func, hh : str, mm : str, tag : str): hhmm = hh + \u0026#34;:\u0026#34; + mm schedule.every().day.at(hhmm).do( func ).tag(tag) # 指定した hh:mm にプログラムを実行するためにスケジュールに登録する # 重複も許されるので気を付ける # tag はカンマ区切りで複数指定可能。 for h in range(0, 24): for m in [0, 15, 30, 45, 5]: hh = f\u0026#39;{h:02}\u0026#39; mm = f\u0026#39;{m:02}\u0026#39; add_schedule(test_func, hh=hh, mm=mm, tag=\u0026#34;test\u0026#34;) #add_schedule(hh=hh, mm=mm, tag=\u0026#34;test\u0026#34;) # スケジュールを実行する while True: schedule.run_pending() time.sleep(1) # Get several jobs, filtered by tags jobs = schedule.get_jobs(\u0026#39;test\u0026#39;) # スケジュールを削除する schedule.clear()       "},{"id":9,"href":"/docs/python3/","title":"Python3","section":"01_hugoのドキュメント群","content":"Python3 #  test\n"},{"id":10,"href":"/docs/vagrant/","title":"Vagrant","section":"01_hugoのドキュメント群","content":"vagrant #  "},{"id":11,"href":"/docs/data-science/","title":"Data Science","section":"01_hugoのドキュメント群","content":"Data Science #  "},{"id":12,"href":"/docs/git/","title":"Git","section":"01_hugoのドキュメント群","content":"git #  "},{"id":13,"href":"/docs/hugo%E9%96%A2%E9%80%A3/","title":"Hugo関連","section":"01_hugoのドキュメント群","content":"Hugo関連 #  "},{"id":14,"href":"/docs/data-science/pip/","title":"pip","section":"Data Science","content":" pip install mplfinance "},{"id":15,"href":"/docs/network/%E9%80%9A%E4%BF%A1%E9%80%9F%E5%BA%A6/","title":"通信速度","section":"01_hugoのドキュメント群","content":"httping\n"}]